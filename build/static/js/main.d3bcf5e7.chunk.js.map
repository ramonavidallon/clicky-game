{"version":3,"sources":["components/header/header.js","components/charCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","style","background","color","className","score","topScore","charCard","onClick","counterCheck","character","alt","src","imageURL","App","state","characters","shuffleCharacters","data","datacopy","Object","toConsumableArray","i","length","j","Math","floor","random","_ref","name","correctGuess","updatedCharacters","_this","map","updatedCharacter","objectSpread","selected","console","log","handleCorrect","handleIncorrect","_this$state","newScore","newTopScore","max","setState","resetCharacters","this","_this2","header","components_charCard","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAceA,EAXA,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,WAAY,OAAQC,MAAO,UAAWC,UAAW,oCAC1DN,EAAAC,EAAAC,cAAA,OAAKI,UAAW,aACZN,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,qBAAaH,EAAMQ,OACnBP,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMS,aCUpBC,EAhBE,SAACV,GAEd,OACEC,EAAAC,EAAAC,cAAA,OAAKQ,QAAS,kBAAIX,EAAMY,aAAaZ,EAAMa,YAAYN,UAAU,cACjEN,EAAAC,EAAAC,cAAA,OAAKW,IAAKd,EAAMa,UAAWE,IAAKf,EAAMgB,oBCkG7BC,6MA/FbC,MAAQ,CACNC,aACAX,MAAO,EACPC,SAAU,KAQVW,kBAAoB,SAACC,GAEnB,IADA,IAAMC,EAAQC,OAAAC,EAAA,EAAAD,CAAOF,GACZI,EAAIH,EAASI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADIM,EAEf,CAACT,EAASK,GAAIL,EAASG,IAAnDH,EAASG,GAFkCM,EAAA,GAE9BT,EAASK,GAFqBI,EAAA,GAI9C,OAAOT,KAGTV,aAAe,SAACoB,GACd,IAAIC,GAAe,EAEbC,EADeC,EAAKjB,MAAnBC,WAC8BiB,IAAI,SAAAvB,GACvC,IAAMwB,EAAgBd,OAAAe,EAAA,EAAAf,CAAA,GAAOV,GAO7B,OANIwB,EAAiBL,OAASA,IACM,IAA9BK,EAAiBE,WACnBF,EAAiBE,UAAW,EAC5BN,GAAe,GAGZI,IAETG,QAAQC,IAAIP,GAEZD,EAAeE,EAAKO,cAAcR,GAAoBC,EAAKQ,gBAAgBT,MAI7EQ,cAAgB,SAACvB,GAAe,IAAAyB,EACJT,EAAKjB,MAAxBV,EADuBoC,EACvBpC,MAAOC,EADgBmC,EAChBnC,SACd+B,QAAQC,IAAI,CAACjC,QAAOC,aAEpB,IAAMoC,EAAWrC,EAAQ,EACzBgC,QAAQC,IAAI,CAACI,aAEb,IAAMC,EAAclB,KAAKmB,IAAIF,EAAUpC,GACvC+B,QAAQC,IAAI,CAACK,gBAEbX,EAAKa,SAAS,CACZxC,MAAOqC,EACPpC,SAAUqC,EACV3B,WAAYgB,EAAKf,kBAAkBD,QAIvCwB,gBAAkB,SAACxB,GACjBqB,QAAQC,IAAI,mBAEZN,EAAKa,SAAS,CACZ7B,WAAYgB,EAAKc,gBAAgB9B,GACjCX,MAAO,OAIXyC,gBAAkB,SAAC9B,GACjB,IAAM8B,EAAkB9B,EAAWiB,IAAI,SAAAvB,GAAS,OAAAU,OAAAe,EAAA,EAAAf,CAAA,GAASV,EAAT,CAAoB0B,UAAU,MAC9E,OAAOJ,EAAKf,kBAAkB6B,uFA7DhCC,KAAKF,SAAS,CACZ7B,WAAY+B,KAAK9B,kBAAkB8B,KAAKhC,MAAMC,+CAgExC,IAAAgC,EAAAD,KAEN,OACEjD,EAAAC,EAAAC,cAAA,WACOF,EAAAC,EAAAC,cAACiD,EAAD,CAAQ5C,MAAO0C,KAAKhC,MAAMV,MAAOC,SAAUyC,KAAKhC,MAAMT,WACtDR,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACdN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACV2C,KAAKhC,MAAMC,WAAWiB,IAAI,SAACvB,GAAD,OAC3BZ,EAAAC,EAAAC,cAACkD,EAAD,CACAC,IAAKzC,EAAU0C,GACfA,GAAK1C,EAAU0C,GACf1C,UAAWA,EAAUmB,KACrBO,SAAU1B,EAAU0B,SACpBvB,SAAUH,EAAUG,SACpBJ,aAAcuC,EAAKvC,2BAvFrB4C,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d3bcf5e7.chunk.js","sourcesContent":["\nimport React from 'react';\n\nconst Header = (props)=> (\n    <nav style={{background: \"blue\", color: \"yellow\"}} className={\"navbar navbar-default sticky-top\"}>\n        <div className={\"container\"}>\n            <div>Spongebob Squarepants & Friends</div>\n            <div>score: {props.score}</div>\n            <div>Top score: {props.topScore}</div>\n\n        </div>\n    </nav>\n);\n\nexport default Header;","import React from 'react';\n\nconst charCard = (props) => {\n\n    return (\n      <div onClick={()=>props.counterCheck(props.character)} className=\"col-3 mt-3\">\n      <img alt={props.character} src={props.imageURL} />\n    </div>\n    )\n\n}\n\n\n\n\n\n\n\nexport default charCard;","import React, { Component } from 'react';\nimport Header from './components/header/header'\nimport CharacterCard from './components/charCard'\nimport './index.css'\nimport characters from './Characters.json'\n\n\nclass App extends Component {\n\n  state = {\n    characters,\n    score: 0,\n    topScore: 0\n  };\n  componentDidMount(){\n    this.setState({\n      characters: this.shuffleCharacters(this.state.characters)\n    })\n  }\n\n    shuffleCharacters = (data) =>  {\n      const datacopy = [...data]\n      for (let i = datacopy.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [datacopy[i], datacopy[j]] = [datacopy[j], datacopy[i]];\n      }\n      return datacopy;\n    };\n\n    counterCheck = (name) => {      \n      let correctGuess = false;\n      const {characters} = this.state;\n      const updatedCharacters = characters.map(character => {\n        const updatedCharacter = {...character}\n        if (updatedCharacter.name === name) {\n          if (updatedCharacter.selected === false) {\n            updatedCharacter.selected = true;\n            correctGuess = true;\n          }\n        }\n        return updatedCharacter;\n      })\n      console.log(updatedCharacters);\n      \n      correctGuess ? this.handleCorrect(updatedCharacters): this.handleIncorrect(updatedCharacters)\n\n    }\n\n    handleCorrect = (characters) => {\n      const {score, topScore} = this.state;\n      console.log({score, topScore});\n      \n      const newScore = score + 1;\n      console.log({newScore});\n      \n      const newTopScore = Math.max(newScore, topScore);\n      console.log({newTopScore});\n      \n      this.setState({\n        score: newScore,\n        topScore: newTopScore,\n        characters: this.shuffleCharacters(characters)\n      })\n    }\n\n    handleIncorrect = (characters) => {\n      console.log(\"handleIncorrect\");\n      \n      this.setState({\n        characters: this.resetCharacters(characters),\n        score: 0\n      })\n    }\n\n    resetCharacters = (characters) => {\n      const resetCharacters = characters.map(character => ({...character, selected: false}))\n      return this.shuffleCharacters(resetCharacters);\n    }\n\n\n    render(){\n      \n      return(\n        <div>\n               <Header score={this.state.score} topScore={this.state.topScore} />\n               <div className=\"container\">\n                <div className=\"row\">\n                    {this.state.characters.map((character) => \n                    <CharacterCard  \n                    key={character.id} \n                    id ={character.id} \n                    character={character.name} \n                    selected={character.selected}\n                    imageURL={character.imageURL}\n                    counterCheck={this.counterCheck}\n                    />)}\n                </div>\n            </div>\n        </div>\n      )\n      };\n}\n\n\nexport default App;\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}